<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software issues on Erwin Kuhn</title>
    <link>https://erwinkn.com/tech/</link>
    <description>Recent content in Software issues on Erwin Kuhn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://erwinkn.com/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting conflict-free replicated data types to production</title>
      <link>https://erwinkn.com/getting-crdts-to-production/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://erwinkn.com/getting-crdts-to-production/</guid>
      <description>Hi! This is the introduction to a series of working notes on the missing pieces before we can start building offline collaborative apps using conflict-free replicated data types (CRDTs).
So far, the plan is:
 Introduction: The road to offline collaborative apps (you are here) Conflict-free replicated databases (CRDBs): design Conflict-free replicated databases (CRDBs): implementation Decentralized data migrations Real-world CRDTs: Topogether, an app for outdoor climbing and collaborative cartography Extensible CRDTs: building new data structures and invariants in user-land Secure CRDTs: access control and Byzantine fault tolerance Optimizing CRDTs: make it fast, make it small  This series will take a while, as I will be building an experimental RDT library from scratch and putting it into production on Topogether.</description>
    </item>
    
    <item>
      <title>Everything is an incremental computation</title>
      <link>https://erwinkn.com/incremental/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://erwinkn.com/incremental/</guid>
      <description>There are some algorithms in computer science that just keep coming up in unrelated domains. There&amp;rsquo;s one that I see everywhere I look, but never heard described as universal: the algorithm behind incremental computation, reactivity, or change propagation - however you want to call it.
Its most famous implementation is the one that powers spreadsheets like Excel. If you have a large sheet with many formulas and the value of one cell changes, how do you propagate that change in the most efficient manner?</description>
    </item>
    
    <item>
      <title>Building offline-ready apps: the scale of offline functionality</title>
      <link>https://erwinkn.com/offline-ready/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://erwinkn.com/offline-ready/</guid>
      <description>It&amp;rsquo;s surprising how many apps simply bail out if you&amp;rsquo;re not online. Make a quick test: grab your phone, turn off the network and open random apps. See how many of them even show you something, beyond an error message.
If we start talking about Web apps, the percentage of them that works offline quickly goes to zero.
Even though most apps could cache data and provide quite a lot of offline functionality, teams often don&amp;rsquo;t take the time to think through how their software may behave without a server to talk to.</description>
    </item>
    
    <item>
      <title>Transfering state from server to client with Blazor WASM and prerendering</title>
      <link>https://erwinkn.com/tech/blazor-rehydration/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://erwinkn.com/tech/blazor-rehydration/</guid>
      <description>Edit: .NET 6 now solves this problem using persist-component-state (docs)
I wanted to brush up my Blazor skills. I had been using the new .NET framework in my work with Vicat, an international cement &amp;amp; concrete group based in France, to develop a modelling tool for long term roadmaps towards carbon neutrality. Coding with it felt really nice, but its overall performance as a client-side framework is not good.
Since there&amp;rsquo;s no better way to put a framework to the test than to build something and optimize it as much as possible, I decided to make a good old Hacker News reader using Blazor WebAssembly.</description>
    </item>
    
  </channel>
</rss>
